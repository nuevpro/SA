import { useState, useEffect } from "react";
import Footer from "@/components/layout/Footer";
import Navbar from "@/components/layout/Navbar";
import Sidebar from "@/components/layout/Sidebar";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Switch } from "@/components/ui/switch";
import { Label } from "@/components/ui/label";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { toast } from "sonner";
import { supabase } from "@/integrations/supabase/client";
import { useAuth } from "@/context/AuthContext";
import { useForm } from "react-hook-form";
import {
  Settings,
  User,
  Lock,
  Bell,
  Database,
  Cloud,
  Webhook,
  Bot,
  Loader2,
} from "lucide-react";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";

const translations = {
  settings: "Configuración",
  managePreferences: "Administra tus preferencias y configuración del sistema",
  account: "Cuenta",
  notifications: "Notificaciones",
  integrations: "Integraciones",
  aiSettings: "Configuración de IA",
  profileSettings: "Configuración de Perfil",
  fullName: "Nombre Completo",
  emailAddress: "Correo Electrónico",
  bio: "Biografía",
  aboutYourself: "Breve descripción sobre ti",
  saveProfile: "Guardar Perfil",
  security: "Seguridad",
  currentPassword: "Contraseña Actual",
  newPassword: "Nueva Contraseña",
  confirmPassword: "Confirmar Contraseña",
  enable2FA: "Habilitar autenticación de dos factores",
  updatePassword: "Actualizar Contraseña",
  emailNotifications: "Notificaciones por Correo",
  callUploads: "Subidas de Llamadas",
  receiveUploads: "Recibir notificaciones cuando se suben nuevas llamadas",
  analysisComplete: "Análisis Completado",
  receiveAnalysis: "Recibir notificaciones cuando se completa el análisis de llamadas",
  dailyReports: "Informes Diarios",
  receiveDailyReports: "Recibir informes de resumen diarios",
  systemUpdates: "Actualizaciones del Sistema",
  receiveSystemUpdates: "Recibir notificaciones sobre actualizaciones del sistema",
  inAppNotifications: "Notificaciones en la Aplicación",
  lowScoreAlerts: "Alertas de Puntuación Baja",
  notifiedLowScore: "Recibir notificaciones cuando las llamadas reciben una puntuación baja",
  keywordMentions: "Menciones de Palabras Clave",
  notifiedKeywords: "Recibir notificaciones cuando se mencionan palabras clave específicas en las llamadas",
  keywords: "Palabras clave (separadas por comas)",
  keywordsExample: "ej., reembolso, queja, cancelar",
  saveNotificationSettings: "Guardar Configuración de Notificaciones",
  connectedServices: "Servicios Conectados",
  googleDrive: "Google Drive",
  connectGoogleDrive: "Conectar para importar archivos desde Google Drive",
  oneDrive: "OneDrive",
  connectOneDrive: "Conectar para importar archivos desde OneDrive",
  sftpServer: "Servidor SFTP",
  connectSftp: "Conectar para importar archivos desde servidor SFTP",
  connect: "Conectar",
  configure: "Configurar",
  apiIntegrations: "Integraciones de API",
  apiKey: "Clave API",
  useApiKey: "Usa esta clave para acceder a la API de ConvertIA",
  webhookUrl: "URL de Webhook",
  enableWebhooks: "Habilitar webhooks",
  saveIntegrationSettings: "Guardar Configuración de Integración",
  aiModelSettings: "Configuración de Modelo de IA",
  transcriptionModel: "Modelo de Transcripción",
  analysisModel: "Modelo de Análisis",
  openaiApiKey: "Clave API de OpenAI",
  aiAnalysisSettings: "Configuración de Análisis de IA",
  speakerDiarization: "Diarización de Hablantes",
  identifySpeakers: "Identificar y separar automáticamente a los hablantes",
  sentimentAnalysis: "Análisis de Sentimiento",
  analyzeSentiment: "Analizar el sentimiento de las llamadas",
  autoGeneratedFeedback: "Retroalimentación Auto-Generada",
  generateFeedback: "Generar retroalimentación para agentes basada en el análisis de llamadas",
  keywordSpotting: "Detección de Palabras Clave",
  detectKeywords: "Detectar palabras clave específicas en las llamadas",
  saveAiSettings: "Guardar Configuración de IA",
  copy: "Copiar",
  saving: "Guardando...",
  error_title: "Error",
  error_saving: "Error al guardar la configuración",
  success_title: "Éxito",
  success_saving: "Configuración guardada correctamente",
  profile_saved: "Perfil guardado correctamente"
};

export default function SettingsPage() {
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [isSaving, setIsSaving] = useState(false);
  const { user, updateUser } = useAuth();

  const aiSettingsForm = useForm({
    defaultValues: {
      transcriptionModel: "openai-whisper",
      analysisModel: "gpt-4o",
      openaiKey: "",
      speakerDiarization: true,
      sentimentAnalysis: true,
      autoFeedback: true,
      keywordSpotting: true
    }
  });

  const profileForm = useForm({
    defaultValues: {
      name: user?.name || user?.full_name || "",
      email: user?.email || "",
      bio: ""
    }
  });

  useEffect(() => {
    const fetchUserSettings = async () => {
      if (user?.id) {
        try {
          console.log("Obteniendo configuración para el usuario:", user.id);
          const { data, error } = await supabase
            .from('user_settings')
            .select('*')
            .eq('user_id', user.id)
            .maybeSingle();
            
          if (error) {
            console.error("Error al obtener configuración:", error);
            if (error.code !== 'PGRST116') {
              throw error;
            }
          }
          
          console.log("Datos de configuración recibidos:", data);
          
          if (data) {
            aiSettingsForm.reset({
              transcriptionModel: data.transcription_model || "openai-whisper",
              analysisModel: data.analysis_model || "gpt-4o",
              openaiKey: data.openai_key || "",
              speakerDiarization: data.speaker_diarization !== false,
              sentimentAnalysis: data.sentiment_analysis !== false,
              autoFeedback: data.auto_feedback !== false,
              keywordSpotting: data.keyword_spotting !== false
            });
          }
        } catch (error) {
          console.error("Error al obtener la configuración del usuario:", error);
          toast.error("Error al obtener la configuración");
        }
      }
    };
    
    fetchUserSettings();
    
    // Actualizar formulario de perfil cuando el usuario se carga
    if (user) {
      profileForm.reset({
        name: user.name || user.full_name || "",
        email: user.email || "",
        bio: ""
      });
    }
  }, [user, aiSettingsForm, profileForm]);

  const saveAISettings = async (data: any) => {
    if (!user?.id) {
      toast.error("Debes iniciar sesión para guardar la configuración");
      return;
    }
    
    setIsSaving(true);
    
    try {
      console.log("Guardando configuración para el usuario:", user.id);
      console.log("Datos a guardar:", data);
      
      const { data: existingData, error: checkError } = await supabase
        .from('user_settings')
        .select('id')
        .eq('user_id', user.id)
        .maybeSingle();
        
      if (checkError && checkError.code !== 'PGRST116') {
        console.error("Error al verificar configuración existente:", checkError);
        throw checkError;
      }
      
      const settingsData = {
        user_id: user.id,
        transcription_model: data.transcriptionModel,
        analysis_model: data.analysisModel,
        openai_key: data.openaiKey,
        speaker_diarization: data.speakerDiarization,
        sentiment_analysis: data.sentimentAnalysis,
        auto_feedback: data.autoFeedback,
        keyword_spotting: data.keywordSpotting,
        updated_at: new Date().toISOString()
      };
      
      console.log("¿Existe configuración previa?", existingData?.id ? "Sí" : "No");
      console.log("Datos a enviar:", settingsData);
      
      let error;
      
      if (existingData?.id) {
        console.log("Actualizando configuración existente");
        const { error: updateError } = await supabase
          .from('user_settings')
          .update(settingsData)
          .eq('user_id', user.id);
          
        error = updateError;
        if (updateError) console.error("Error al actualizar:", updateError);
      } else {
        console.log("Insertando nueva configuración");
        const { error: insertError } = await supabase
          .from('user_settings')
          .insert({
            ...settingsData,
            created_at: new Date().toISOString()
          });
          
        error = insertError;
        if (insertError) console.error("Error al insertar:", insertError);
      }
      
      if (error) throw error;
      
      console.log("Configuración guardada exitosamente");
      toast.success(translations.success_saving);

      // Añadir un pequeño retraso para resetear el estado después de que se muestre el toast
      setTimeout(() => {
        setIsSaving(false);
      }, 500);
    } catch (error) {
      console.error("Error al guardar la configuración de IA:", error);
      toast.error(translations.error_saving);
      setIsSaving(false);
    }
  };

  const saveProfile = async (data: any) => {
    setIsSaving(true);
    try {
      console.log("Guardando perfil para el usuario:", user?.id);
      console.log("Datos a guardar:", data);
      
      // Actualizar perfil en Supabase
      const { error } = await supabase.auth.updateUser({
        data: { 
          full_name: data.name,
          name: data.name 
        }
      });
      
      if (error) throw error;
      
      // También actualizar en la tabla profiles para asegurar consistencia
      const { error: profileError } = await supabase
        .from('profiles')
        .update({
          full_name: data.name
        })
        .eq('id', user?.id);
      
      if (profileError) {
        console.warn("Advertencia: No se pudo actualizar la tabla profiles:", profileError);
      }
      
      // Actualizar contexto de autenticación
      if (user) {
        updateUser({
          name: data.name,
          full_name: data.name
        });
      }
      
      toast.success(translations.profile_saved);

      // Añadir un pequeño retraso para resetear el estado después de que se muestre el toast
      setTimeout(() => {
        setIsSaving(false);
      }, 500);
    } catch (error) {
      console.error("Error al guardar el perfil:", error);
      toast.error("Error al guardar el perfil");
      setIsSaving(false);
    }
  };

  const saveNotificationSettings = () => {
    toast.success("Configuración de notificaciones guardada correctamente");
  };

  const handleConnectService = (serviceName: string) => {
    toast.info(`Conexión a ${serviceName} iniciada`, {
      description: "Esta funcionalidad estará disponible próximamente"
    });
  };

  return (
    <div className="min-h-screen flex flex-col">
      <Navbar toggleSidebar={() => setSidebarOpen(!sidebarOpen)} />
      <div className="flex flex-1">
        <Sidebar isOpen={sidebarOpen} closeSidebar={() => setSidebarOpen(false)} />
        <main className="flex-1 p-4 md:p-6 ml-0 md:ml-64 transition-all duration-300">
          <div className="mb-6">
            <h2 className="text-3xl font-bold tracking-tight">{translations.settings}</h2>
            <p className="text-muted-foreground">
              {translations.managePreferences}
            </p>
          </div>

          <Tabs defaultValue="account" className="w-full animate-fade-in">
            <TabsList className="grid w-full grid-cols-2 md:grid-cols-4 lg:w-auto">
              <TabsTrigger value="account" className="flex items-center">
                <User className="mr-2 h-4 w-4" /> {translations.account}
              </TabsTrigger>
              <TabsTrigger value="notifications" className="flex items-center">
                <Bell className="mr-2 h-4 w-4" /> {translations.notifications}
              </TabsTrigger>
              <TabsTrigger value="integrations" className="flex items-center">
                <Webhook className="mr-2 h-4 w-4" /> {translations.integrations}
              </TabsTrigger>
              <TabsTrigger value="ai" className="flex items-center">
                <Bot className="mr-2 h-4 w-4" /> {translations.aiSettings}
              </TabsTrigger>
            </TabsList>

            <TabsContent value="account" className="space-y-6 mt-6">
              <Card className="glass-card dark:glass-card-dark p-6">
                <h3 className="text-lg font-medium mb-4">{translations.profileSettings}</h3>
                <Form {...profileForm}>
                  <form onSubmit={profileForm.handleSubmit(saveProfile)} className="space-y-4">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <FormField
                        control={profileForm.control}
                        name="name"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>{translations.fullName}</FormLabel>
                            <FormControl>
                              <Input
                                placeholder={translations.fullName}
                                {...field}
                              />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      <FormField
                        control={profileForm.control}
                        name="email"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>{translations.emailAddress}</FormLabel>
                            <FormControl>
                              <Input
                                type="email"
                                placeholder={translations.emailAddress}
                                readOnly
                                {...field}
                              />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </div>
                    <FormField
                      control={profileForm.control}
                      name="bio"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>{translations.bio}</FormLabel>
                          <FormControl>
                            <textarea
                              className="w-full px-3 py-2 border rounded-md border-input bg-background text-foreground transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-primary/50"
                              rows={3}
                              placeholder={translations.aboutYourself}
                              {...field}
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    <Button type="submit" disabled={isSaving}>
                      {isSaving ? (
                        <>
                          <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                          {translations.saving}
                        </>
                      ) : (
                        translations.saveProfile
                      )}
                    </Button>
                  </form>
                </Form>
              </Card>

              <Card className="glass-card dark:glass-card-dark p-6">
                <h3 className="text-lg font-medium mb-4">{translations.security}</h3>
                <div className="space-y-4">
                  <div className="space-y-2">
                    <Label htmlFor="current-password">{translations.currentPassword}</Label>
                    <Input
                      id="current-password"
                      type="password"
                      placeholder={translations.currentPassword}
                    />
                  </div>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <Label htmlFor="new-password">{translations.newPassword}</Label>
                      <Input
                        id="new-password"
                        type="password"
                        placeholder={translations.newPassword}
                      />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="confirm-password">{translations.confirmPassword}</Label>
                      <Input
                        id="confirm-password"
                        type="password"
                        placeholder={translations.confirmPassword}
                      />
                    </div>
                  </div>
                  <div className="flex items-center space-x-2">
                    <Switch id="2fa" />
                    <Label htmlFor="2fa">{translations.enable2FA}</Label>
                  </div>
                  <Button>{translations.updatePassword}</Button>
                </div>
              </Card>
            </TabsContent>

            <TabsContent value="notifications" className="space-y-6 mt-6">
              <Card className="glass-card dark:glass-card-dark p-6">
                <h3 className="text-lg font-medium mb-4">{translations.emailNotifications}</h3>
                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="font-medium">{translations.callUploads}</p>
                      <p className="text-sm text-muted-foreground">
                        {translations.receiveUploads}
                      </p>
                    </div>
                    <Switch id="call-uploads" defaultChecked />
                  </div>
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="font-medium">{translations.analysisComplete}</p>
                      <p className="text-sm text-muted-foreground">
                        {translations.receiveAnalysis}
                      </p>
                    </div>
                    <Switch id="analysis-complete" defaultChecked />
                  </div>
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="font-medium">{translations.dailyReports}</p>
                      <p className="text-sm text-muted-foreground">
                        {translations.receiveDailyReports}
                      </p>
                    </div>
                    <Switch id="daily-reports" />
                  </div>
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="font-medium">{translations.systemUpdates}</p>
                      <p className="text-sm text-muted-foreground">
                        {translations.receiveSystemUpdates}
                      </p>
                    </div>
                    <Switch id="system-updates" defaultChecked />
                  </div>
                </div>
              </Card>

              <Card className="glass-card dark:glass-card-dark p-6">
                <h3 className="text-lg font-medium mb-4">{translations.inAppNotifications}</h3>
                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="font-medium">{translations.lowScoreAlerts}</p>
                      <p className="text-sm text-muted-foreground">
                        {translations.notifiedLowScore}
                      </p>
                    </div>
                    <Switch id="low-score-alerts" defaultChecked />
                  </div>
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="font-medium">{translations.keywordMentions}</p>
                      <p className="text-sm text-muted-foreground">
                        {translations.notifiedKeywords}
                      </p>
                    </div>
                    <Switch id="keyword-mentions" />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="keywords">{translations.keywords}</Label>
                    <Input
                      id="keywords"
                      placeholder={translations.keywordsExample}
                    />
                  </div>
                  <Button>{translations.saveNotificationSettings}</Button>
                </div>
              </Card>
            </TabsContent>

            <TabsContent value="integrations" className="space-y-6 mt-6">
              <Card className="glass-card dark:glass-card-dark p-6">
                <h3 className="text-lg font-medium mb-4">{translations.connectedServices}</h3>
                <div className="space-y-4">
                  <div className="flex items-center justify-between p-4 border rounded-md">
                    <div className="flex items-center">
                      <Cloud className="h-8 w-8 text-blue-500 mr-4" />
                      <div>
                        <p className="font-medium">{translations.googleDrive}</p>
                        <p className="text-sm text-muted-foreground">
                          {translations.connectGoogleDrive}
                        </p>
                      </div>
                    </div>
                    <Button variant="outline">{translations.connect}</Button>
                  </div>
                  <div className="flex items-center justify-between p-4 border rounded-md">
                    <div className="flex items-center">
                      <Cloud className="h-8 w-8 text-blue-600 mr-4" />
                      <div>
                        <p className="font-medium">{translations.oneDrive}</p>
                        <p className="text-sm text-muted-foreground">
                          {translations.connectOneDrive}
                        </p>
                      </div>
                    </div>
                    <Button variant="outline">{translations.connect}</Button>
                  </div>
                  <div className="flex items-center justify-between p-4 border rounded-md">
                    <div className="flex items-center">
                      <Database className="h-8 w-8 text-indigo-500 mr-4" />
                      <div>
                        <p className="font-medium">{translations.sftpServer}</p>
                        <p className="text-sm text-muted-foreground">
                          {translations.connectSftp}
                        </p>
                      </div>
                    </div>
                    <Button variant="outline">{translations.configure}</Button>
                  </div>
                </div>
              </Card>

              <Card className="glass-card dark:glass-card-dark p-6">
                <h3 className="text-lg font-medium mb-4">{translations.apiIntegrations}</h3>
                <div className="space-y-4">
                  <div className="space-y-2">
                    <Label htmlFor="api-key">{translations.apiKey}</Label>
                    <div className="flex">
                      <Input
                        id="api-key"
                        type="password"
                        defaultValue="sk_test_example_key"
                        readOnly
                        className="rounded-r-none"
                      />
                      <Button className="rounded-l-none">{translations.copy}</Button>
                    </div>
                    <p className="text-xs text-muted-foreground">
                      {translations.useApiKey}
                    </p>
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="webhook-url">{translations.webhookUrl}</Label>
                    <Input
                      id="webhook-url"
                      placeholder={translations.webhookUrl}
                    />
                  </div>
                  <div className="flex items-center space-x-2">
                    <Switch id="enable-webhooks" />
                    <Label htmlFor="enable-webhooks">{translations.enableWebhooks}</Label>
                  </div>
                  <Button>{translations.saveIntegrationSettings}</Button>
                </div>
              </Card>
            </TabsContent>

            <TabsContent value="ai" className="space-y-6 mt-6">
              <Form {...aiSettingsForm}>
                <form onSubmit={aiSettingsForm.handleSubmit(saveAISettings)}>
                  <Card className="glass-card dark:glass-card-dark p-6">
                    <h3 className="text-lg font-medium mb-4">{translations.aiModelSettings}</h3>
                    <div className="space-y-4">
                      <FormField
                        control={aiSettingsForm.control}
                        name="transcriptionModel"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>{translations.transcriptionModel}</FormLabel>
                            <FormControl>
                              <select
                                className="w-full px-3 py-2 border rounded-md border-input bg-background text-foreground transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-primary/50"
                                {...field}
                              >
                                <option value="openai-whisper">OpenAI Whisper</option>
                                <option value="google-speech">Google Speech-to-Text</option>
                                <option value="azure-speech">Azure Speech Services</option>
                              </select>
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      <FormField
                        control={aiSettingsForm.control}
                        name="analysisModel"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>{translations.analysisModel}</FormLabel>
                            <FormControl>
                              <select
                                className="w-full px-3 py-2 border rounded-md border-input bg-background text-foreground transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-primary/50"
                                {...field}
                              >
                                <option value="gpt-4o">GPT-4o</option>
                                <option value="gpt-4o-mini">GPT-4o Mini</option>
                                <option value="claude-3">Claude 3</option>
                              </select>
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      <FormField
                        control={aiSettingsForm.control}
                        name="openaiKey"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>{translations.openaiApiKey}</FormLabel>
                            <FormControl>
                              <Input
                                type="password"
                                placeholder="sk-..."
                                {...field}
                              />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </div>
                  </Card>

                  <Card className="glass-card dark:glass-card-dark p-6 mt-6">
                    <h3 className="text-lg font-medium mb-4">{translations.aiAnalysisSettings}</h3>
                    <div className="space-y-4">
                      <FormField
                        control={aiSettingsForm.control}
                        name="speakerDiarization"
                        render={({ field }) => (
                          <FormItem className="flex items-center justify-between space-y-0">
                            <div>
                              <p className="font-medium">{translations.speakerDiarization}</p>
                              <p className="text-sm text-muted-foreground">
                                {translations.identifySpeakers}
                              </p>
                            </div>
                            <FormControl>
                              <Switch
                                checked={field.value}
                                onCheckedChange={field.onChange}
                              />
                            </FormControl>
                          </FormItem>
                        )}
                      />
                      <FormField
                        control={aiSettingsForm.control}
                        name="sentimentAnalysis"
                        render={({ field }) => (
                          <FormItem className="flex items-center justify-between space-y-0">
                            <div>
                              <p className="font-medium">{translations.sentimentAnalysis}</p>
                              <p className="text-sm text-muted-foreground">
                                {translations.analyzeSentiment}
                              </p>
                            </div>
                            <FormControl>
                              <Switch
                                checked={field.value}
                                onCheckedChange={field.onChange}
                              />
                            </FormControl>
                          </FormItem>
                        )}
                      />
                      <FormField
                        control={aiSettingsForm.control}
                        name="autoFeedback"
                        render={({ field }) => (
                          <FormItem className="flex items-center justify-between space-y-0">
                            <div>
                              <p className="font-medium">{translations.autoGeneratedFeedback}</p>
                              <p className="text-sm text-muted-foreground">
                                {translations.generateFeedback}
                              </p>
                            </div>
                            <FormControl>
                              <Switch
                                checked={field.value}
                                onCheckedChange={field.onChange}
                              />
                            </FormControl>
                          </FormItem>
                        )}
                      />
                      <FormField
                        control={aiSettingsForm.control}
                        name="keywordSpotting"
                        render={({ field }) => (
                          <FormItem className="flex items-center justify-between space-y-0">
                            <div>
                              <p className="font-medium">{translations.keywordSpotting}</p>
                              <p className="text-sm text-muted-foreground">
                                {translations.detectKeywords}
                              </p>
                            </div>
                            <FormControl>
                              <Switch
                                checked={field.value}
                                onCheckedChange={field.onChange}
                              />
                            </FormControl>
                          </FormItem>
                        )}
                      />
                      <Button type="submit" disabled={isSaving}>
                        {isSaving ? (
                          <>
                            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                            {translations.saving}
                          </>
                        ) : (
                          translations.saveAiSettings
                        )}
                      </Button>
                    </div>
                  </Card>
                </form>
              </Form>
            </TabsContent>
          </Tabs>
        </main>
      </div>
      <div className="ml-0 md:ml-64 transition-all duration-300">
        <Footer />
      </div>
    </div>
  );
}
